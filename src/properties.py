import logging
import os
import random

# Connection constants

REDIS_HOST = str(os.environ.get('wti.redisAddress', default='localhost'))
REDIS_PORT = int(os.environ.get('wti.redisPort', default=6379))
CASSANDRA_HOST = str(os.environ.get('wti.cassandraAddress', default='localhost'))
CASSANDRA_PORT = int(os.environ.get('wti.cassandraPort', default=9042))

# Profile constants

# Percentage of profiles to be loaded into Redis cache on profile server start
PROFILE_PRELOAD_PERCENT = float(os.environ.get('wti.profileExpireTime', default=0.25))
if PROFILE_PRELOAD_PERCENT < 0.0:
    PROFILE_PRELOAD_PERCENT = 0.0
elif PROFILE_PRELOAD_PERCENT > 1.0:
    PROFILE_PRELOAD_PERCENT = 1.0

# Time after which profile will be expired in Redis cache
PROFILE_EXPIRE_TIME = int(os.environ.get('wti.profileExpireTime', default=30))
# Total amount of profiles to be used
PROFILE_COUNT = int(os.environ.get('wti.profileCount', default=100))
# Frequency with which stores updater updates random profiles
PROFILE_UPDATE_FREQUENCY = int(os.environ.get('wti.profileUpdateFrequency', default=2))
# Frequency with which recommendation engine retrieves profiles
PROFILE_RETRIEVAL_FREQUENCY = int(os.environ.get('wti.profileAcquisitionFrequency', default=1))

# Profile update timeout in seconds
PROFILE_UPDATE_TIMEOUT = float(os.environ.get('wti.profileAcquisitionTimeout', default=0.1))

# Default profile (profile of unknown user)
PROFILE_TEMPLATE = {'genre-Adventure': 0.0, 'genre-Animation': 0.0, 'genre-Children': 0.0, 'genre-Comedy': 0.0,
                    'genre-Fantasy': 0.0, 'genre-Romance': 0.0, 'genre-Drama': 0.0, 'genre-Action': 0.0,
                    'genre-Crime': 0.0, 'genre-Thriller': 0.0, 'genre-Horror': 0.0, 'genre-Mystery': 0.0,
                    'genre-Sci-Fi': 0.0, 'genre-IMAX': 0.0, 'genre-Documentary': 0.0, 'genre-War': 0.0,
                    'genre-Musical': 0.0, 'genre-Film-Noir': 0.0, 'genre-Western': 0.0, 'genre-Short': 0.0}

# Delay constants

_MIN_RANDOM_DELAY = int(int(os.environ.get('wti.maxRandomDelay', default=0)))
_MAX_RANDOM_DELAY = int(int(os.environ.get('wti.minRandomDelay', default=200)))


def get_random_delay_millis() -> int:
    """
    Generates random delay value in milliseconds based on given minimum and maximum.

    :return: Random delay value in milliseconds
    """
    return random.randint(_MIN_RANDOM_DELAY, _MAX_RANDOM_DELAY)


def get_random_delay_secs() -> float:
    """
    Generates random delay value in seconds based on given minimum and maximum.

    :return: Random delay value in seconds
    """
    return get_random_delay_millis() / 1000


def get_random_user_id() -> int:
    """
    Generates random userId in range 1 to given profile amount.

    :return: Random userId
    """
    return random.randint(1, PROFILE_COUNT)


def get_random_user_id_list() -> list:
    """
    Generates list of random user ids with length given in percentages of profiles amount.

    :return: List of random user ids
    """
    result = list(range(1, PROFILE_COUNT + 1))
    desired_profile_count: int = round(PROFILE_COUNT * PROFILE_PRELOAD_PERCENT)
    # List is generated by removing random elements until desired length is achieved
    while len(result) > desired_profile_count:
        result.pop(random.randint(0, len(result) - 1))
    return result


def setup_logging():
    log_format = '%(asctime)-15s : %(message)s'
    logging.basicConfig(format=log_format, level=logging.INFO)

import logging
import os
import random

# Connection constants
import sys

REDIS_HOST = str(os.environ.get('wti.redisAddress', default='localhost'))
REDIS_PORT = int(os.environ.get('wti.redisPort', default=6379))
CASSANDRA_HOST = str(os.environ.get('wti.cassandraAddress', default='localhost'))
CASSANDRA_PORT = int(os.environ.get('wti.cassandraPort', default=9042))

# Profile constants

# Percentage of profiles to be loaded into Redis cache on profile server start
PROFILE_PRELOAD_PERCENT = float(os.environ.get('wti.profileExpireTime', default=0.25))
if PROFILE_PRELOAD_PERCENT < 0.0 or PROFILE_PRELOAD_PERCENT > 1.0:
    raise ArithmeticError('profile preload percent out of bounds')

# Time after which profile will be expired in Redis cache
PROFILE_EXPIRE_TIME = int(os.environ.get('wti.profileExpireTime', default=30))
# Total amount of profiles to be used
PROFILE_COUNT = int(os.environ.get('wti.profileCount', default=100))
# Frequency with which stores updater updates random profiles
PROFILE_UPDATE_FREQUENCY = int(os.environ.get('wti.profileUpdateFrequency', default=2))
# Frequency with which recommendation engine retrieves profiles
PROFILE_RETRIEVAL_FREQUENCY = int(os.environ.get('wti.profileAcquisitionFrequency', default=1))

# Profile update timeout in seconds
PROFILE_UPDATE_TIMEOUT = float(os.environ.get('wti.profileAcquisitionTimeout', default=0.1))

# Default profile (profile of unknown user)
PROFILE_TEMPLATE = {'genre-adventure': 0.0, 'genre-animation': 0.0, 'genre-children': 0.0, 'genre-comedy': 0.0,
                    'genre-fantasy': 0.0, 'genre-romance': 0.0, 'genre-drama': 0.0, 'genre-action': 0.0,
                    'genre-crime': 0.0, 'genre-thriller': 0.0, 'genre-horror': 0.0, 'genre-mystery': 0.0,
                    'genre-sci-fi': 0.0, 'genre-imax': 0.0, 'genre-documentary': 0.0, 'genre-war': 0.0,
                    'genre-musical': 0.0, 'genre-film-noir': 0.0, 'genre-western': 0.0, 'genre-short': 0.0}

# Delay constants

_MIN_RANDOM_DELAY = int(int(os.environ.get('wti.maxRandomDelay', default=0)))
_MAX_RANDOM_DELAY = int(int(os.environ.get('wti.minRandomDelay', default=200)))


def get_random_delay_millis() -> int:
    """
    Generates random delay value in milliseconds based on given minimum and maximum.

    :return: Random delay value in milliseconds
    """
    return random.randint(_MIN_RANDOM_DELAY, _MAX_RANDOM_DELAY)


def get_random_delay_secs() -> float:
    """
    Generates random delay value in seconds based on given minimum and maximum.

    :return: Random delay value in seconds
    """
    return get_random_delay_millis() / 1000


def get_random_user_id() -> int:
    """
    Generates random userId in range 1 to given profile amount.

    :return: Random userId
    """
    return random.randint(1, PROFILE_COUNT)


def get_random_user_id_list() -> list:
    """
    Generates list of random user ids with length given in percentages of profiles amount.

    :return: List of random user ids
    """
    result = list(range(1, PROFILE_COUNT + 1))
    desired_profile_count: int = round(PROFILE_COUNT * PROFILE_PRELOAD_PERCENT)
    # List is generated by removing random elements until desired length is achieved
    while len(result) > desired_profile_count:
        result.pop(random.randint(0, len(result) - 1))
    return result


def setup_logging() -> None:
    """
    Adds color formatting to logs and sets log level to INFO.

    :return: None
    """
    red = '\u001b[31m'
    green = '\u001b[32m'
    yellow = '\u001b[33m'
    blue = '\u001b[34m'
    reset = '\u001b[39;49m'

    level_colors = {
        'WARNING': yellow,
        'INFO': green,
        'DEBUG': green,
        'CRITICAL': red,
        'ERROR': red
    }

    class ColorFormatter(logging.Formatter):
        def __init__(self, log_format):
            super().__init__(log_format)

        def format(self, record):
            if record.levelname in level_colors:
                record.levelname = "{color_begin}{level:>8}{color_end}".format(
                    level=record.levelname,
                    color_begin=level_colors[record.levelname],
                    color_end=reset,
                )
            return super(ColorFormatter, self).format(record)

    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(logging.INFO)
    formatter = ColorFormatter('{}%(asctime)-15s %(levelname)s{} : %(message)s'.format(blue, reset))
    ch.setFormatter(formatter)

    logging.basicConfig(level=logging.INFO)
    logging.getLogger('').handlers = []
    logging.getLogger('').addHandler(ch)
